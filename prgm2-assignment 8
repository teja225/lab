#implement stack operation using singly linked list
class Node:  
    def _init_(self,data): 
        self.data = data 
        self.next = None      
class Stack:  
    def _init_(self): 
        self.head = None
    def isempty(self): 
        if self.head == None: 
            return True
        else: 
            return False 
    def push(self,data):  
        if self.head == None: 
            self.head=Node(data)   
        else: 
            newnode = Node(data) 
            newnode.next = self.head 
            self.head = newnode  
    def pop(self):
        if self.isempty(): 
            return None
        else:  
            poppednode = self.head 
            self.head = self.head.next
            poppednode.next = None
            return poppednode.data  
    def peek(self):   
        if self.isempty(): 
            return None     
        else: 
            return self.head.data       
    def display(self):   
        iternode = self.head 
        if self.isempty(): 
            print("Stack Underflow") 
        else:  
            while(iternode != None):  
                print(iternode.data,"->",end = " ") 
                iternode = iternode.next
            return 
MyStack = Stack() 
MyStack.push(1)  
MyStack.push(2) 
MyStack.push(3) 
MyStack.push(4)   
MyStack.display()   
print("\nTop element is ",MyStack.peek())   
MyStack.pop() 
MyStack.pop()  
MyStack.display()   
print("\nTop element is ", MyStack.peek())

output:
4 -> 3 -> 2 -> 1 -> 
Top element is  4
2 -> 1 -> 
Top element is  2
